
1. Using Code Insight
---------------------

DECLARE
  BONUS NUMBER;
  SAL NUMBER;
  COMM NUMBER;
  EMP_NAME VARCHAR2 (20);
BEGIN
  SELECT LAST_NAME,  SALARY, COMMISSION_PCT 
  INTO EMP_NAME, SAL, COMM 
  FROM EMPLOYEES 
  WHERE EMPLOYEE_ID = 157;
  BONUS := (SAL * 0.10) + (COMM * 0.15);
  DBMS_OUTPUT.PUT_LINE('EMPLOYEE '|| EMP_NAME || ' EARNS A NEW BONUS OF ' || BONUS );
END; 



2. Create Trigger
-----------------

CREATE OR REPLACE 
TRIGGER TRACK_SALARY_HISTORY
BEFORE INSERT OR UPDATE OF SALARY ON EMPLOYEES
FOR EACH ROW 
WHEN (NEW.EMPLOYEE_ID >0)
DECLARE SAL_DIFF NUMBER;
BEGIN
  SAL_DIFF := :NEW.SALARY - :OLD.SALARY;
  INSERT INTO SALARY_HISTORY (EMP_ID, NEW_SAL, OLD_SAL, INCREASE, UPDATED_ON)
  VALUES (:NEW.EMPLOYEE_ID,:NEW.SALARY, :OLD.SALARY, SAL_DIFF, SYSDATE);
END;

TO TEST THE TRIGGER YOU NEED THE TABLE salary_HISTORY

  CREATE TABLE "SALARY_HISTORY" 
   (	"EMP_ID" NUMBER(4,0), 
	"NEW_SAL" NUMBER(6,0), 
	"OLD_SAL" NUMBER(6,0), 
	"INCREASE" NUMBER(6,0), 
	"UPDATED_ON" DATE
   ) ;


3. Adding procedures and functions
----------------------------------

CREATE OR REPLACE
FUNCTION GET_SALARY (EMP_ID NUMBER) RETURN NUMBER IS
   CURR_SAL NUMBER;
BEGIN
   SELECT SALARY INTO CURR_SAL FROM EMPLOYEES
      WHERE EMPLOYEE_ID = EMP_ID;
   RETURN CURR_SAL;
END GET_SALARY;

CREATE OR REPLACE
FUNCTION GET_SALARY(EMP_ID NUMBER)
	RETURN NUMBER
	AS
	BEGIN
	  RETURN NULL;
	END GET_SALARY;


4. Adding Packages
------------------

CREATE OR REPLACE 
PACKAGE EMP_PROGUNITS AS 
 TYPE EMPRECTYP IS
    RECORD (EMP_ID INT, SALARY REAL);
    CURSOR DESC_SALARY
       RETURN EMPRECTYP;
 PROCEDURE HIRE_EMPLOYEE
    (LAST_NAME VARCHAR2, JOB_ID VARCHAR2, 
    MANAGER_ID NUMBER, SALARY NUMBER, 
    DEPARTMENT_ID NUMBER);
 PROCEDURE FIRE_EMPLOYEE (EMP_ID NUMBER);
 PROCEDURE ADD_DEPT
    (DEPARTMENT_NAME IN DEPARTMENTS.DEPARTMENT_NAME%TYPE,
    LOCATION_ID IN DEPARTMENTS.LOCATION_ID%TYPE);
 END EMP_PROGUNITS;


5.Refactoring Code
------------------

CREATE OR REPLACE TRIGGER SECURE_EMPLOYEES
  BEFORE INSERT OR UPDATE OR DELETE ON EMPLOYEES
BEGIN
  IF TO_CHAR (SYSDATE,'HH24:MI') NOT BETWEEN '08:00' AND '18:00'
  OR TO_CHAR (SYSDATE, 'DY') IN ('SAT', 'SUN') THEN
  RAISE_APPLICATION_ERROR (-20205, 'YOU MAY ONLY MAKE CHANGES DURING NORMAL OFFICE HOURS');
  END IF;
END SECURE_EMPLOYEES;


6.Debugging
-----------

CREATE OR REPLACE
PROCEDURE EMP_DEPTS
  (P_MAXROWS VARCHAR2)
AS
CURSOR EMPDEPT_CURSOR IS
SELECT D.DEPARTMENT_NAME, E.LAST_NAME, J.JOB_TITLE
FROM DEPARTMENTS D, EMPLOYEES E, JOBS J
WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID
 AND  E.JOB_ID = J.JOB_ID;
EMP_RECORD EMPDEPT_CURSOR % ROWTYPE;
TYPE EMP_TAB_TYPE IS TABLE OF EMPDEPT_CURSOR % ROWTYPE INDEX BY BINARY_INTEGER;
EMP_TAB EMP_TAB_TYPE;
I NUMBER := 1;
BEGIN
  OPEN EMPDEPT_CURSOR;
  FETCH EMPDEPT_CURSOR
  INTO EMP_RECORD;
  EMP_TAB(I) := EMP_RECORD;
  WHILE((EMPDEPT_CURSOR % FOUND) AND(I <= P_MAXROWS))
   LOOP I := I + 1; 
   FETCH EMPDEPT_CURSOR
    INTO EMP_RECORD; 
    EMP_TAB(I) := EMP_RECORD;
   END LOOP;
 CLOSE EMPDEPT_CURSOR; FOR J IN REVERSE 1 .. I
  LOOP DBMS_OUTPUT.PUT_LINE('THE EMPLOYEE '|| EMP_TAB(J).LAST_NAME || ' WORKS IN DEPARTMENT '|| EMP_TAB(J).DEPARTMENT_NAME);
  END LOOP;
END;



